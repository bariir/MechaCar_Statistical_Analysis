version
variable_name <- "value here"
variable_name
print(students)
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
print(students)
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (i in students){
print(i)
}
}
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (i in students){
print(i)
}
}
roll_call()
x <- sample(33,3)
print (x)
locker_combinations <- function(class){
combined_vector <- c(students, x)
# Create the for loop and print the student name and locker combination.
for (i in students){
print(combined_vector)
}
}
locker_combinations <- function(class){
combined_vector <- c(students, x)
# Create the for loop and print the student name and locker combination.
for (i in students){
print(combined_vector)
}
}
locker_combinations()
locker_combinations <- function(class){
combined_vector <- c(students, x)
# Create the for loop and print the student name and locker combination.
for (i in students){
print(i)
}
}
locker_combinations()
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class){
print(i)
}
}
roll_call(students)
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
print(students)
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class){
print(i)
}
}
roll_call(students)
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class){
print(student)
}
}
roll_call(students)
install.packages("tidyverse")
install.packages("jsonlite")
setwd("C:/Users/mbari/R_Analysis/01_Demo")
?mutate()
library(tidyverse)
?mutate()
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
?sprad()
?spread()
all.equal(())
all.equal()
all.equal(demo_table3, wide_table)
wide_table <- long_table %>% spread(key="Metric",value="Score")
cls
clear
?ggplot()
head(pgm)
head(mpg)
plt <- ggplot(mpg,aes(x=class()) #import dataset into ggplot
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot
plt + geom_area() #plot a bar plot
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot
View(plt)
View(plt)
plt + geom_bar() #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
View(mpg_summary)
View(mpg_summary)
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")  #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30)) #add line plot with labels
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30)) #add line plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive") #add scatter plot with multiple aesthetics
# To generate a boxplot in ggplot2, we must supploy a vector of numeric values.
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
# geom_boxplot() expects a numeric vector assigned to the y-value
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
# Create Heatmap Plots
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
# Heatmaps are used to look at large trends in a dataset.
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)")  #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)")  + theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
# Add Layers to Plots
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot()  #add boxplot
# Add boxplot, rotate x-axis labels 45 degrees and overlay scatter plot on top
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) + geom_point()
# Create Summary table
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep')
#import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
# add scatter plot
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size")
# Import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
# Add scatter plot with labels and overlay with error bars
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") +
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
# Add scatter plot with labels and overlay with error bars
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
# Faceting
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
# Display the dataframe
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
# Add boxplot with labels rotated 45 degrees
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
?facet_wrap()
#import dataset into ggplot2
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
#create multiple boxplots, one for each MPG type and rotate x-axis labels
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer")
# Qualitative Test for Normality
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
?shapiro.test()
# Shapior.test() function only requires the numeric vector of values you wish to test.
shapiro.test(mtcars$wt)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
plt + geom_density()
sample_table <- population_table %>% sample_n(50)
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven)))
plt + geom_density()
?t.test()
#compare sample versus population means
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))
sample_table <- population_table %>% sample_n(50)
#generate another 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50)
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
?t.test()
#import dataset
mpg_data <- read.csv('mpg_modified.csv')
#select only data points where the year is 1999
mpg_1999 <- mpg_data %>% filter(year==1999)
#select only data points where the year is 2008
mpg_2008 <- mpg_data %>% filter(year==2008)
#compare the mean difference between two samples
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T)
?aov()
#filter columns from mtcars dataset
mtcars_filt <- mtcars[,c("hp","cyl")]
#convert numeric column to factor
mtcars_filt$cyl <- factor(mtcars_filt$cyl)
#compare means across multiple levels
aov(hp ~ cyl,data=mtcars_filt)
# Getting the p-value
summary(aov(hp ~ cyl,data=mtcars_filt))
?cor()
head(mtcars)
# Pearson correlation coefficient
# Test if horsepower (hp) is correlated with quarter mile reace time (qsec)
#import dataset into ggplot2
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
#create scatter plot
plt + geom_point()
cor(mtcars$hp,mtcars$qsec)
# For another example, let's reuse our used_cars dataset.
# read in dataset
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F)
# Display dataframe
head(used_cars)
#import dataset into ggplot2
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price))
#create a scatter plot
plt + geom_point()
#calculate correlation coefficient
cor(used_cars$Miles_Driven,used_cars$Selling_Price)
# convert data frame into numeric matrix
used_matrix <- as.matrix(u
# Create the correlation matrix
cor(used_matrix)
cor(used_matrix)
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")])
cor(used_matrix)
plt <- ggplot(used_matrix,aes(x=Selling_Price,y=Present_Price, z=Miles_Driven))
# Create the correlation matrix
cor(used_matrix)
?lm()
lm(qsec ~ hp,mtcars) #create linear model
# summarize linear model
summary(lm(qsec~hp,mtcars))
#create linear model
model <- lm(qsec ~ hp,mtcars)
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)']
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
#plot scatter and linear model
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
#generate multiple linear regression model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)
# generate contingency table
table(mpg$class,mpg$year)
# generate contingency table
tbl <- table(mpg$class,mpg$year)
chisq.test(tbl)
tbl <- table(mpg$class,mpg$year)
chisq.test(tbl)
source("C:/Users/mbari/R_Analysis/01_Demo/practice.R")
setwd("C:/Users/mbari/git/MechaCar_Statistical_Analysis")
View(mpg_1999)
# Install dplyr package
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr") #Load dplyr package
library(tidyverse) # install dplyr package using tidyverse
mechacar <- read.csv('MechaCar_mpg.csv') #import MechaCar_mpg dataset
View(mechacar)
mechacar <- read.csv('MechaCar_mpg.csv') #import MechaCar_mpg dataset
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + groun
# In the lm() function, pass in all six variables (i.e., columns), and add the dataframe you created as data parameter
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mechacar)
summary(lm(mpg + vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mechacar))
summary(lm(vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD +mpg, data = mechacar))
# install dplyr package using tidyverse
library(tidyverse)
#import MechaCar_mpg dataset
mechacar <- read.csv('MechaCar_mpg.csv')
lm(mpg~vehicle_length+vehicle_weight+spoiler_angle+ground_clearance+AWD,data=mechacar)
summary(lm(vehicle_length~vehic
summary(lm(vehicle_length~vehicle_weight+spoiler_angle+ground_clearance+AWD+mpg,data=mechacar))
library(tidyverse)
#import MechaCar_mpg dataset
mechacar <- read.csv('MechaCar_mpg.csv')
# Perform linear regression using the lm() function. In the lm() function, pass in all six variables (i.e., columns),
# and add the dataframe you created in Step 4 as the data parameter.
lm(mpg~vehicle_length+vehicle_weight+spoiler_angle+ground_clearance+AWD,data=mechacar)
# Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(lm(vehicle_length ~ vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg,data=mechacar))
# install dplyr package using tidyverse
library(tidyverse)
#import MechaCar_mpg dataset
mechacar <- read.csv('MechaCar_mpg.csv')
lm(mpg~vehicle_length+vehicle_weight+spoiler_angle+ground_clearance+AWD,data=mechacar)
# Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(lm(vehicle_length ~ vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg,data=mechacar))
